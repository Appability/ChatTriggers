// For those who want the bleeding edge
buildscript {
    ext.kotlin_version = "1.5.21"

    def mcVersionStr = project.name.tokenize('-')[0]
    def (major, minor, patch) = mcVersionStr.tokenize('.')
    def mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
    def fabric = mcVersion >= 11400 && project.name.endsWith("-fabric")
    project.ext.mcVersion = mcVersion
    project.ext.mcVersionStr = mcVersionStr
    project.ext.mcPlatform = fabric ? 'fabric' : 'forge'
    project.ext.fabric = fabric

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "fabric"
            url = "https://maven.fabricmc.net/"
        }
        if (!fabric) {
            maven {
                name = "forge"
                url = "https://maven.minecraftforge.net"
            }
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        if (fabric) {
            classpath 'fabric-loom:fabric-loom.gradle.plugin:0.8-SNAPSHOT'
        } else if (mcVersion >= 11400) {
            classpath('net.minecraftforge.gradle:ForgeGradle:5.0.5') { // later versions emit tsrg2
                exclude group: 'trove', module: 'trove' // preprocessor/idea requires more recent one
            }
        } else {
            def forgeGradleVersion = mcVersion >= 11200 ? '34ab703' : // FG 2.3
                mcVersion >= 10904 ? '5d1e8d8' : // FG 2.2
                    'd1a7165'   // FG 2.1
            classpath("com.github.ReplayMod:ForgeGradle:$forgeGradleVersion:all") {
                exclude group: 'net.sf.trove4j', module: 'trove4j' // preprocessor/idea requires more recent one
                exclude group: 'trove', module: 'trove' // different name same thing
            }
        }
    }
}

def FG3 = !fabric && mcVersion >= 11400
def FABRIC = fabric

if (FABRIC) {
    apply plugin: 'fabric-loom'
} else if (FG3) {
    apply plugin: 'net.minecraftforge.gradle'
} else {
    apply plugin: 'net.minecraftforge.gradle.forge'
}
apply plugin: 'kotlin'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'maven-publish'

preprocess {
    vars.put("MC", mcVersion)
    vars.put("FABRIC", project.fabric ? 1 : 0)
    vars.put("FORGE", project.fabric ? 0 : 1)
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        url = "https://repo.sk1er.club/repository/maven-public"
    }
    maven { url 'https://jitpack.io' }
}

version = "2.0.0-BETA-" + (
    mcVersion.toString().substring(0, 1) + "." +
        mcVersion.toString().substring(1, 3).replace("0", "") + "." +
        mcVersion.toString().substring(3, 5).replace("0", "")
)
group = "com.chattriggers.ctjs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ctjs"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = mcVersion >= 11700 ? "16" : "1.8"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

if (mcVersion >= 11400) {
    sourceSets {
        api
    }
}

if (FABRIC) {
    minecraft {
        runConfigs.all {
            ideConfigGenerated = true
        }
    }
} else {
    minecraft {
        if (FG3) {
            runs {
                client {
                    workingDirectory rootProject.file('run')
                    property 'forge.logging.console.level', 'info'
                    mods {
                        examplemod {
                            source sourceSets.main
                        }
                    }
                }
            }
        } else {
            runDir = "run"
        }

        if (!FG3) {
            version = [
                11202: '1.12.2-14.23.0.2486',
                11201: '1.12.1-14.22.0.2444',
                11200: '1.12-14.21.1.2387',
                11102: '1.11.2-13.20.0.2216',
                11100: '1.11-13.19.1.2188',
                11002: '1.10.2-12.18.2.2099',
                10904: '1.9.4-12.17.0.1976',
                10809: '1.8.9-11.15.1.1722',
                10800: '1.8-11.14.4.1563',
                10710: '1.7.10-10.13.4.1558-1.7.10',
            ][mcVersion]
            mappings = [
                11404: "snapshot_20190719-1.14.3",
                11202: "snapshot_20170615",
                11201: "snapshot_20170615",
                11200: "snapshot_20170615",
                11102: "snapshot_20161220",
                11100: "snapshot_20161111",
                11002: "snapshot_20160518",
                10904: "snapshot_20160518",
                10809: "stable_22",
                10800: "snapshot_nodoc_20141130",
                10710: "stable_12",
            ][mcVersion]

            // Without this, ForgeGradle tries to run retromap, and gradle fails on
            // 1.8.9 due to improper annotations in ApplyS2STask
            makeObfSourceJar = false
        } else {
            mappings channel: 'snapshot', version: [
                11502: '20200220-1.15.1',
                11602: '20201028-1.16.3',
            ][mcVersion]
        }
    }
}

if (!FABRIC) {
    configurations {
        modApi
        api.extendsFrom(modApi)
        modImplementation
        implementation.extendsFrom(modImplementation)
    }
}

dependencies {
    // Using the "mod" prefix will allow Loom to automatically remap the dependencies (to configured yarn mappings) and
    // to configure the maven publication such that we externally still depend on the non-remapped dep.
    // The Api/Implementation difference is the same as in Gradle.
    modApi "gg.essential:loader-launchwrapper:1.1.1"
    modImplementation "gg.essential:essential-$mcVersionStr-${FABRIC ? 'fabric' : 'forge'}:1463"

    modImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    modImplementation("dev.falsehonesty.asmhelper:AsmHelper:LOCAL-$mcVersion") {
        exclude group: "org.jetbrains.kotlin"
    }
    modImplementation("com.github.falsehonesty:ts-generator:adfb57a8f6") {
        exclude group: "org.jetbrains.kotlin"
    }
    modImplementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'
    modImplementation 'com.chattriggers:rhino:1.8.2'
    modImplementation 'com.fifesoft:rsyntaxtextarea:3.1.3'

    if (FABRIC) {
        minecraft 'com.mojang:minecraft:' + [
            11404: '1.14.4',
            11502: '1.15.2',
            11601: '1.16.1',
            11602: '1.16.2',
            11701: '1.17.1',
        ][mcVersion]
        mappings 'net.fabricmc:yarn:' + [
            11404: '1.14.4+build.16',
            11502: '1.15.2+build.14',
            11601: '1.16.1+build.17:v2',
            11602: '1.16.2+build.47:v2',
            11701: '1.17.1+build.39:v2',
        ][mcVersion]
        modImplementation 'net.fabricmc:fabric-loader:0.11.6'
    }

    if (FG3) {
        minecraft 'net.minecraftforge:forge:' + [
            11404: '1.14.4-28.1.113',
            11502: '1.15.2-31.1.18',
            11602: '1.16.2-33.0.58'
        ][mcVersion]
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", mcVersionStr

    filesMatching(['mcmod.info', 'META-INF/mods.toml', 'fabric.mod.json']) {
        expand 'version': project.version, 'mcversion': mcVersionStr
    }

    exclude "mods.toml"
    exclude "META-INF/mods.toml"

    if (FABRIC) {
        exclude 'mcmod.info'
    } else {
        exclude 'fabric.mod.json'
    }

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

jar {
    dependsOn configurations.modImplementation
    from({
        configurations.modImplementation.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }) {
        exclude 'pack.mcmeta'
        exclude "*LICENSE*"
        exclude "*license*"
        exclude '**/module-info.class'
        if (mcVersion <= 10809) {
            exclude '**/module-info.class'
            exclude 'META-INF/versions/9/**'
        }
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        exclude 'fabric.mod.json'
    }

    manifest {
        attributes(
            "FMLCorePlugin": "com.chattriggers.ctjs.launch.plugin.CTJSLoadingPlugin",
            "FMLCorePluginContainsFMLMod": "true",
            "TweakClass": "gg.essential.loader.stage0.EssentialSetupTweaker",
            "FMLAT": "ctjs_at.cfg"
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
