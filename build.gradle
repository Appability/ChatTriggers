import org.jetbrains.dokka.gradle.DokkaTask
//import proguard.gradle.ProGuardTask

buildscript {
    def f = file("gradle/mcversion.txt")

    project.ext.mcVersion = f.exists() ? f.readLines().first() as int : 10809
    ext.kotlin_version = "1.6.0"
    ext.dokka_version = "1.6.0"

    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spongepowered.org/repository/maven-public/" }
        maven { url "https://jitpack.io" }
        flatDir dirs: 'libs'
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath ':proguard:'
    }
}

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower-mini' version '1.2.1'
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'java'

version = "2.0.0-BETA-" + (
    mcVersion.toString().substring(0, 1) + "." +
        mcVersion.toString().substring(1, 3).replace("0", "") + "." +
        mcVersion.toString().substring(3, 5).replace("0", "")
)
group = "com.chattriggers.ctjs" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ctjs"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    provided
    // Make compile extend from our provided configuration so that things added to bundled end up on the compile classpath
    compile.extendsFrom(provided)
}

minecraft {
    refmapName = 'mixins.chattriggers.refmap.json'
    runConfigs.all {
        ideConfigGenerated = true
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
}

dependencies {
    minecraft "com.mojang:minecraft:1.17.1"
    mappings "net.fabricmc:yarn:1.17.1+build.65:v2"
    modImplementation "net.fabricmc:fabric-loader:0.12.12"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.45.0+1.17"
    modImplementation "net.fabricmc:fabric-language-kotlin:1.7.1+kotlin.1.6.10"

    modImplementation(include("gg.essential:loader-fabric:1.0.0"))
    modCompileOnly("gg.essential:essential-1.17.1-fabric:1720")

    implementation("dev.falsehonesty.asmhelper:AsmHelper:1.5.1-$mcVersion") {
        exclude group: "org.jetbrains.kotlin"
    }
    implementation("com.github.falsehonesty:ts-generator:adfb57a8f6") {
        exclude group: "org.jetbrains.kotlin"
    }
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
    implementation 'com.chattriggers:rhino:1.8.2'
    implementation 'com.fifesoft:rsyntaxtextarea:3.1.4'
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

task userdocs(type: DokkaTask) {
    description = "Generate the docs to be used by scripters, excludes internal classes"
    group = "documentation"

    outputDirectory.set(file("$buildDir/javadoc"))

    suppressInheritedMembers.set(true)

    configure {
        dokkaSourceSets {
            main {
                jdkVersion.set(8)

                for (def pkg : ["engine.langs", "engine.loader", "engine.module", "utils", "listeners", "loader", "launch", "commands", "minecraft.wrappers.objects.threading"]) {
                    perPackageOption {
                        matchingRegex.set("${"com.chattriggers.ctjs.$pkg".replace(".", "\\.")}(\$|\\.).*")
                        suppress.set(true)
                    }
                }

                sourceLink {
                    localDirectory.set(file("src/main/kotlin"))
                    remoteUrl.set(new URL(
                        "https://github.com/ChatTriggers/ChatTriggers/tree/master/src/main/kotlin"))
                    remoteLineSuffix.set("#L")
                }
            }
        }
    }
}

apply from: 'preprocessor.gradle'

task changeMcVersion() {
    doLast {
        def version

        if (project.hasProperty("minecraftVersion")) {
            version = project.minecraftVersion
        } else {
            version = 10809
            println "Defaulting to version 1.8.9..."
        }

        project.ext.mcVersion = version
        def f = file("gradle/mcversion.txt")
        f.delete()
        f.createNewFile()
        f.write(version.toString())

        println "MC target version is $version"
        def vars = [MC: version as int]
        project.convertTree(vars, 'src/main/java')
        project.convertTree(vars, 'src/main/kotlin')
        project.convertTree(vars, 'src/main/resources')
    }
}


//task proguard(type: ProGuardTask) {
//    configuration 'configuration.pro'
//
//    // dontobfuscate()
//
//    libraryjars files(configurations.runtimeClasspath.collect())
//
//    injars "build/libs/ctjs-${version}.jar"
//    outjars "build/libs/ctjs-${version}-RELEASE.jar"
//}
//
//proguard.dependsOn build
